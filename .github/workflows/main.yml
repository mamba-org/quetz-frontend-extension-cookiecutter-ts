name: CI

on:
  push:
    branches: ["*.0"]
  pull_request:
    branches: ["*"]
  schedule:
    - cron: "0 0 * * *"

jobs:
  names:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "my_extension"
            pyname: "my_extension"
          - name: "myextension"
            pyname: "myextension"
          - name: "my-extension"
            pyname: "my_extension"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-3.7-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.7-
            pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install dependencies
        run: |
          python -m pip install cookiecutter check-manifest build

      - name: Create pure frontend extension
        env:
          NAME: ${{ matrix.name }}
          PYNAME: ${{ matrix.pyname }}
        run: |
          set -eux
          # Trick to use custom parameters
          python -c "from cookiecutter.main import cookiecutter; import json, os; f=open('cookiecutter.json'); d=json.load(f); f.close(); d['extension_name']=os.getenv('NAME'); cookiecutter('.', extra_context=d, no_input=True)"
          pushd ${PYNAME}
          pip install quetz-frontend
          yarn install && yarn run eslint:check
          pip install -e .
          quetz-frontend develop . --overwrite
          quetz-frontend list
          quetz-frontend list 2>&1 | grep -ie "${NAME}"

          quetz-frontend clean
          quetz-frontend clean-frontend
          pip uninstall -y ${NAME} quetz-frontend

          git init && git add .
          check-manifest -v

          popd
          rm -rf ${NAME}

  test_isolated:
    needs: server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"
      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-3.7-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.7-
            pip-
      - uses: actions/download-artifact@v2
        with:
          name: myextension-sdist
      - name: Install and Test
        run: |
          set -eux
          # Remove NodeJS, twice to take care of system and locally installed node versions.
          sudo rm -rf $(which node)
          sudo rm -rf $(which node)

          pip install myextension.tar.gz
          pip install quetz-frontend
          quetz-frontend list 2>&1 | grep -ie "myextension"
